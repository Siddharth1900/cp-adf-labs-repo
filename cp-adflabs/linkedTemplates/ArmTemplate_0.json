{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "cp-adflabs"
		},
		"ls_AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase1'"
		},
		"ls_adlsgen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2'"
		},
		"ls_adlsgen2_output_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2_output'"
		},
		"ls_azsqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azsqldb'"
		},
		"ls_onprem_SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_onprem_SqlServer1'"
		},
		"ls_adlsgen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cpadlsgen21207.dfs.core.windows.net/"
		},
		"ls_adlsgen2_output_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cpadlsgen21208.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2_output')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_output_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_output_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azsqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azsqldb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/onpremIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_cust"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "india/silver/2023",
						"fileSystem": "global"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "cname ",
						"type": "String"
					},
					{
						"name": "clocation",
						"type": "String"
					},
					{
						"name": "cphno",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_param_sourcedate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@substring(replace(dataset().ds_param_sourcedate,'-','/'),0,10)",
							"type": "Expression"
						},
						"fileSystem": "test-cont"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "Location",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_output",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_param_sinkdate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@substring(replace(dataset().ds_param_sinkdate,'-','/'),0,10)",
							"type": "Expression"
						},
						"fileSystem": "workingarea"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuresqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azsqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_param_schema": {
						"type": "string"
					},
					"ds_param_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_param_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_param_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_output",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onprem_SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_onprem_SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "onpremIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/onpremIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_1209_ParentGM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "india",
						"fileSystem": "global2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "Location",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_1209_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_output",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_subfoldername": {
						"type": "string"
					},
					"ds_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().ds_subfoldername",
							"type": "Expression"
						},
						"fileSystem": "refined"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_inp_ChildGM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_subfoldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('india/',dataset().ds_subfoldername)",
							"type": "Expression"
						},
						"fileSystem": "global2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "Location",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_subfolder": {
						"type": "string"
					},
					"ds_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('india/',dataset().ds_subfolder)",
							"type": "Expression"
						},
						"fileSystem": "global2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "Location",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1_adlsgen2sink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "srccust"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "srcdimcust"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "FullOuterJoin"
						},
						{
							"name": "split1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "union1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_loaddate as string ('2023/12/09'),",
						"     param_processdate as string ('2023/12/08')",
						"}",
						"source(output(",
						"          cid as short,",
						"          {cname } as string,",
						"          clocation as string,",
						"          cphno as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'global3',",
						"     folderPath: (concat('india/silver/cust/', $param_loaddate)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> srccust",
						"source(output(",
						"          surrogate_key as long,",
						"          cid as short,",
						"          {cname } as string,",
						"          clocation as string,",
						"          cphno as long,",
						"          created_by as string,",
						"          created_on as string,",
						"          updated_by as string,",
						"          updated_on as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'global3',",
						"     folderPath: (concat('india/gold/dim_cust/',$param_processdate)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> srcdimcust",
						"srccust select(mapColumn(",
						"          each(match(1==1),",
						"               concat('src_',$$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(src_surrogate_key = crc32(concat(toString(src_cid),{src_cname },src_clocation,toString(src_cphno)))) ~> derivedColumn1",
						"derivedColumn1, srcdimcust join(src_cid == cid,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FullOuterJoin",
						"FullOuterJoin split(isNull(cid) && isNull(surrogate_key),",
						"     (src_cid==cid && src_surrogate_key ==surrogate_key),",
						"     (isNull(src_cid)),",
						"     (src_cid==cid) && (surrogate_key!=src_surrogate_key),",
						"     disjoint: false) ~> split1@(NewRecords, OldRecordsUnchangedLoaded, OldRecordsUnchangedNotLoaded, UpdatedRecords)",
						"split1@NewRecords select(mapColumn(",
						"          surrogate_key = src_surrogate_key,",
						"          cid = src_cid,",
						"          cname = {src_cname },",
						"          clocation = src_clocation,",
						"          cphno = src_cphno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(created_by = 'dataflow',",
						"          created_on = toString(currentTimestamp()),",
						"          updated_by = 'dataflow',",
						"          updated_on = toString(currentTimestamp())) ~> derivedColumn2",
						"split1@UpdatedRecords select(mapColumn(",
						"          surrogate_key = src_surrogate_key,",
						"          cid = src_cid,",
						"          cname = {src_cname },",
						"          clocation = src_clocation,",
						"          cphno = src_cphno,",
						"          created_by,",
						"          created_on,",
						"          updated_by",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(updated_on = toString(currentTimestamp())) ~> derivedColumn3",
						"split1@OldRecordsUnchangedLoaded select(mapColumn(",
						"          surrogate_key = src_surrogate_key,",
						"          cid = src_cid,",
						"          cname = {src_cname },",
						"          clocation = src_clocation,",
						"          cphno = src_cphno,",
						"          created_by,",
						"          created_on,",
						"          updated_by,",
						"          updated_on",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"split1@OldRecordsUnchangedNotLoaded select(mapColumn(",
						"          surrogate_key,",
						"          cid,",
						"          cname = {cname },",
						"          clocation,",
						"          cphno,",
						"          created_by,",
						"          created_on,",
						"          updated_by,",
						"          updated_on",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"derivedColumn2, select4, select5, derivedColumn3 union(byName: true)~> union1",
						"union1 sort(asc(cid, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'global3',",
						"     folderPath: (concat('india/gold/dim_cust/', $param_loaddate)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['dim_cust_Processed.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          surrogate_key,",
						"          cid,",
						"          {cname } = cname,",
						"          clocation,",
						"          cphno,",
						"          created_by,",
						"          created_on,",
						"          updated_by,",
						"          updated_on",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling_Window_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adlsgen2_input",
								"type": "DatasetReference",
								"parameters": {
									"ds_param_sourcedate": {
										"value": "@pipeline().parameters.pl_param_windowStartDate",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adlsgen2_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_param_sinkdate": {
										"value": "@pipeline().parameters.pl_param_windowEndDate",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_param_windowStartDate": {
						"type": "string"
					},
					"pl_param_windowEndDate": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adlsgen2_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_adlsgen2_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onprem_SqlServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_sink_schema": {
						"type": "string"
					},
					"ds_sink_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "t1"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_sink_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_sink_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onprem_SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datavalidation_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_json",
								"type": "DatasetReference"
							},
							"name": "BadRecordsSink"
						},
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2_output",
								"type": "LinkedServiceReference"
							},
							"name": "goodRecordsSink"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as short,",
						"          {cname } as string,",
						"          clocation as string,",
						"          cphno as long,",
						"          cjoindate as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     fileName: 'DataQuality.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source",
						"source aggregate(groupBy(cid,",
						"          {cname },",
						"          clocation,",
						"          cphno,",
						"          cjoindate),",
						"     DuplicateCheck = count(cid)) ~> aggregate1",
						"aggregate1 derive(NullCheck = iif(isNull({cname }) || isNull(clocation)  ||isNull(cphno) || isNull(cjoindate),'Yes', 'No'),",
						"          DateFormatValid = iif(isDate(cjoindate,'mm/dd/yyyy'),'Yes','No'),",
						"          {cname } = trim({cname }, ' ')) ~> derivedColumn1",
						"derivedColumn1 split(DuplicateCheck>1 || NullCheck=='Yes' ||DateFormatValid =='No',",
						"     disjoint: false) ~> split1@(BadRecords, GoodRecords)",
						"derivedColumn2 select(mapColumn(",
						"          cid,",
						"          {cname },",
						"          clocation,",
						"          cphno,",
						"          cjoindate,",
						"          {Reject Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@GoodRecords select(mapColumn(",
						"          cid,",
						"          {cname },",
						"          clocation,",
						"          cphno,",
						"          cjoindate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"split1@BadRecords derive({Reject Reason} = concat(iif(DuplicateCheck>1,'Record is Duplicate one',' '),\r",
						"iif(NullCheck =='Yes','Record is Null',' '),\r",
						"iif(DateFormatValid =='No','DateFormat is Incorrect',' '))) ~> derivedColumn2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BadRecords_Output.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BadRecordsSink",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['GoodRecords_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> goodRecordsSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2')]",
				"[concat(variables('factoryId'), '/datasets/ds_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_output')]"
			]
		}
	]
}