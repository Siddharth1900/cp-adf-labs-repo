{
	"name": "scd1_adlsgen2sink",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adlsgen2",
						"type": "LinkedServiceReference"
					},
					"name": "srccust"
				},
				{
					"linkedService": {
						"referenceName": "ls_adlsgen2",
						"type": "LinkedServiceReference"
					},
					"name": "srcdimcust"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "FullOuterJoin"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     param_loaddate as string,",
				"     param_processdate as string",
				"}",
				"source(output(",
				"          cid as short,",
				"          {cname } as string,",
				"          clocation as string,",
				"          cphno as long",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'global3',",
				"     folderPath: (concat('india/silver/cust/', $param_loaddate)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srccust",
				"source(output(",
				"          surrogate_key as integer,",
				"          cid as short,",
				"          {cname } as string,",
				"          clocation as string,",
				"          cphno as long,",
				"          created_by as string,",
				"          created_on as string,",
				"          updated_by as string,",
				"          updated_on as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'global3',",
				"     folderPath: (concat('india/gold/dim_cust/' ,$param_processdate)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srcdimcust",
				"srccust select(mapColumn(",
				"          each(match(1==1),",
				"               concat('src_',$$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(src_surrogate_key = \r",
				"crc32(concat(toString(src_cid),{src_cname },src_clocation,toString(src_cphno)))) ~> derivedColumn1",
				"derivedColumn1, srcdimcust join(src_cid == cid,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FullOuterJoin",
				"FullOuterJoin split(isNull(cid) && isNull(surrogate_key),",
				"     (src_cid==cid && src_surrogate_key ==surrogate_key) ||(isNull(src_cid) && isNull(src_surrogate_key)),",
				"     (src_cid==cid) && (surrogate_key!=src_surrogate_key),",
				"     disjoint: false) ~> split1@(NewRecords, OldRecordsUnchanged, UpdatedRecords)"
			]
		}
	}
}